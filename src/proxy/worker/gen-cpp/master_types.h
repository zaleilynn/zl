/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef master_TYPES_H
#define master_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _VMStat__isset {
  _VMStat__isset() : vc_name(false), task_id(false), used_vcpu(false), used_memory(false) {}
  bool vc_name;
  bool task_id;
  bool used_vcpu;
  bool used_memory;
} _VMStat__isset;

class VMStat {
 public:

  static const char* ascii_fingerprint; // = "CA686CC0868D3556820A8027F5E9EE8D";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x68,0x6C,0xC0,0x86,0x8D,0x35,0x56,0x82,0x0A,0x80,0x27,0xF5,0xE9,0xEE,0x8D};

  VMStat() : vc_name(), task_id(0), used_vcpu(0), used_memory(0) {
  }

  virtual ~VMStat() throw() {}

  std::string vc_name;
  int64_t task_id;
  double used_vcpu;
  int32_t used_memory;

  _VMStat__isset __isset;

  void __set_vc_name(const std::string& val) {
    vc_name = val;
  }

  void __set_task_id(const int64_t val) {
    task_id = val;
  }

  void __set_used_vcpu(const double val) {
    used_vcpu = val;
  }

  void __set_used_memory(const int32_t val) {
    used_memory = val;
  }

  bool operator == (const VMStat & rhs) const
  {
    if (!(vc_name == rhs.vc_name))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    if (!(used_vcpu == rhs.used_vcpu))
      return false;
    if (!(used_memory == rhs.used_memory))
      return false;
    return true;
  }
  bool operator != (const VMStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VMStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(VMStat &a, VMStat &b);

typedef struct _MachineInfo__isset {
  _MachineInfo__isset() : endpoint(false), cpu_usage(false), all_vcpu(false), all_memory(false), avail_vcpu(false), avail_memory(false), vm_list(false) {}
  bool endpoint;
  bool cpu_usage;
  bool all_vcpu;
  bool all_memory;
  bool avail_vcpu;
  bool avail_memory;
  bool vm_list;
} _MachineInfo__isset;

class MachineInfo {
 public:

  static const char* ascii_fingerprint; // = "2E26812E0ED4F46F8A3A9E75FA0B9AA9";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0x26,0x81,0x2E,0x0E,0xD4,0xF4,0x6F,0x8A,0x3A,0x9E,0x75,0xFA,0x0B,0x9A,0xA9};

  MachineInfo() : endpoint(), cpu_usage(0), all_vcpu(0), all_memory(0), avail_vcpu(0), avail_memory(0) {
  }

  virtual ~MachineInfo() throw() {}

  std::string endpoint;
  double cpu_usage;
  int32_t all_vcpu;
  int32_t all_memory;
  int32_t avail_vcpu;
  int32_t avail_memory;
  std::vector<VMStat>  vm_list;

  _MachineInfo__isset __isset;

  void __set_endpoint(const std::string& val) {
    endpoint = val;
  }

  void __set_cpu_usage(const double val) {
    cpu_usage = val;
  }

  void __set_all_vcpu(const int32_t val) {
    all_vcpu = val;
  }

  void __set_all_memory(const int32_t val) {
    all_memory = val;
  }

  void __set_avail_vcpu(const int32_t val) {
    avail_vcpu = val;
  }

  void __set_avail_memory(const int32_t val) {
    avail_memory = val;
  }

  void __set_vm_list(const std::vector<VMStat> & val) {
    vm_list = val;
  }

  bool operator == (const MachineInfo & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(cpu_usage == rhs.cpu_usage))
      return false;
    if (!(all_vcpu == rhs.all_vcpu))
      return false;
    if (!(all_memory == rhs.all_memory))
      return false;
    if (!(avail_vcpu == rhs.avail_vcpu))
      return false;
    if (!(avail_memory == rhs.avail_memory))
      return false;
    if (!(vm_list == rhs.vm_list))
      return false;
    return true;
  }
  bool operator != (const MachineInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MachineInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MachineInfo &a, MachineInfo &b);

typedef struct _VMInfo__isset {
  _VMInfo__isset() : os(false), vcpu(false), memory(false) {}
  bool os;
  bool vcpu;
  bool memory;
} _VMInfo__isset;

class VMInfo {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  VMInfo() : os(), vcpu(0), memory(0) {
  }

  virtual ~VMInfo() throw() {}

  std::string os;
  int32_t vcpu;
  int32_t memory;

  _VMInfo__isset __isset;

  void __set_os(const std::string& val) {
    os = val;
  }

  void __set_vcpu(const int32_t val) {
    vcpu = val;
  }

  void __set_memory(const int32_t val) {
    memory = val;
  }

  bool operator == (const VMInfo & rhs) const
  {
    if (!(os == rhs.os))
      return false;
    if (!(vcpu == rhs.vcpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    return true;
  }
  bool operator != (const VMInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VMInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(VMInfo &a, VMInfo &b);

typedef struct _VCInfo__isset {
  _VCInfo__isset() : name(false), quota(false), vm_info(false) {}
  bool name;
  bool quota;
  bool vm_info;
} _VCInfo__isset;

class VCInfo {
 public:

  static const char* ascii_fingerprint; // = "4699B625E4680339957632F93E9D3328";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0x99,0xB6,0x25,0xE4,0x68,0x03,0x39,0x95,0x76,0x32,0xF9,0x3E,0x9D,0x33,0x28};

  VCInfo() : name(), quota(0) {
  }

  virtual ~VCInfo() throw() {}

  std::string name;
  int32_t quota;
  VMInfo vm_info;

  _VCInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_quota(const int32_t val) {
    quota = val;
  }

  void __set_vm_info(const VMInfo& val) {
    vm_info = val;
  }

  bool operator == (const VCInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(quota == rhs.quota))
      return false;
    if (!(vm_info == rhs.vm_info))
      return false;
    return true;
  }
  bool operator != (const VCInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VCInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(VCInfo &a, VCInfo &b);

typedef struct _TaskInfo__isset {
  _TaskInfo__isset() : vc_name(false), id(false), vm_info(false) {}
  bool vc_name;
  bool id;
  bool vm_info;
} _TaskInfo__isset;

class TaskInfo {
 public:

  static const char* ascii_fingerprint; // = "28FA8100862E37EDAD9AFC1961ADAF88";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xFA,0x81,0x00,0x86,0x2E,0x37,0xED,0xAD,0x9A,0xFC,0x19,0x61,0xAD,0xAF,0x88};

  TaskInfo() : vc_name(), id(0) {
  }

  virtual ~TaskInfo() throw() {}

  std::string vc_name;
  int64_t id;
  VMInfo vm_info;

  _TaskInfo__isset __isset;

  void __set_vc_name(const std::string& val) {
    vc_name = val;
  }

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_vm_info(const VMInfo& val) {
    vm_info = val;
  }

  bool operator == (const TaskInfo & rhs) const
  {
    if (!(vc_name == rhs.vc_name))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(vm_info == rhs.vm_info))
      return false;
    return true;
  }
  bool operator != (const TaskInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TaskInfo &a, TaskInfo &b);



#endif
