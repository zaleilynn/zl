/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "master_types.h"

#include <algorithm>



const char* ExecutorStat::ascii_fingerprint = "8C1B57512073FCB1A6CCB6AEA8F3A47D";
const uint8_t ExecutorStat::binary_fingerprint[16] = {0x8C,0x1B,0x57,0x51,0x20,0x73,0xFC,0xB1,0xA6,0xCC,0xB6,0xAE,0xA8,0xF3,0xA4,0x7D};

uint32_t ExecutorStat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vc_name);
          this->__isset.vc_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->task_id);
          this->__isset.task_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cpu_usage);
          this->__isset.cpu_usage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->memory_usage);
          this->__isset.memory_usage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->io_usage);
          this->__isset.io_usage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecutorStat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecutorStat");

  xfer += oprot->writeFieldBegin("vc_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->vc_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->task_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpu_usage", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->cpu_usage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory_usage", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->memory_usage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("io_usage", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->io_usage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExecutorStat &a, ExecutorStat &b) {
  using ::std::swap;
  swap(a.vc_name, b.vc_name);
  swap(a.task_id, b.task_id);
  swap(a.cpu_usage, b.cpu_usage);
  swap(a.memory_usage, b.memory_usage);
  swap(a.io_usage, b.io_usage);
  swap(a.__isset, b.__isset);
}

const char* MachineInfo::ascii_fingerprint = "C9CADA0E4D10F3E4D5F8EAEFBFF60EB4";
const uint8_t MachineInfo::binary_fingerprint[16] = {0xC9,0xCA,0xDA,0x0E,0x4D,0x10,0xF3,0xE4,0xD5,0xF8,0xEA,0xEF,0xBF,0xF6,0x0E,0xB4};

uint32_t MachineInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->endpoint);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cpu_usage);
          this->__isset.cpu_usage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->all_cpu);
          this->__isset.all_cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->all_memory);
          this->__isset.all_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->all_io);
          this->__isset.all_io = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->avail_cpu);
          this->__isset.avail_cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->avail_memory);
          this->__isset.avail_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->avail_io);
          this->__isset.avail_io = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vm_list.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->vm_list.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->vm_list[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vm_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MachineInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MachineInfo");

  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->endpoint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpu_usage", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->cpu_usage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("all_cpu", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->all_cpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("all_memory", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->all_memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("all_io", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->all_io);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avail_cpu", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->avail_cpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avail_memory", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->avail_memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avail_io", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->avail_io);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vm_list", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vm_list.size()));
    std::vector<ExecutorStat> ::const_iterator _iter5;
    for (_iter5 = this->vm_list.begin(); _iter5 != this->vm_list.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MachineInfo &a, MachineInfo &b) {
  using ::std::swap;
  swap(a.endpoint, b.endpoint);
  swap(a.cpu_usage, b.cpu_usage);
  swap(a.all_cpu, b.all_cpu);
  swap(a.all_memory, b.all_memory);
  swap(a.all_io, b.all_io);
  swap(a.avail_cpu, b.avail_cpu);
  swap(a.avail_memory, b.avail_memory);
  swap(a.avail_io, b.avail_io);
  swap(a.vm_list, b.vm_list);
  swap(a.__isset, b.__isset);
}

const char* VCInfo::ascii_fingerprint = "740EBE59832D377153B5F814B9A31324";
const uint8_t VCInfo::binary_fingerprint[16] = {0x74,0x0E,0xBE,0x59,0x83,0x2D,0x37,0x71,0x53,0xB5,0xF8,0x14,0xB9,0xA3,0x13,0x24};

uint32_t VCInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->quota);
          this->__isset.quota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->os);
          this->__isset.os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cpu);
          this->__isset.cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memory);
          this->__isset.memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->IO);
          this->__isset.IO = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app);
          this->__isset.app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VCInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("VCInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quota", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->quota);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->os);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpu", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->cpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IO", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->IO);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->app);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VCInfo &a, VCInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.quota, b.quota);
  swap(a.os, b.os);
  swap(a.type, b.type);
  swap(a.cpu, b.cpu);
  swap(a.memory, b.memory);
  swap(a.IO, b.IO);
  swap(a.app, b.app);
  swap(a.__isset, b.__isset);
}

const char* TaskInfo::ascii_fingerprint = "B8898E0E7F8922ADC5322FC2157B886B";
const uint8_t TaskInfo::binary_fingerprint[16] = {0xB8,0x89,0x8E,0x0E,0x7F,0x89,0x22,0xAD,0xC5,0x32,0x2F,0xC2,0x15,0x7B,0x88,0x6B};

uint32_t TaskInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vc_name);
          this->__isset.vc_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->os);
          this->__isset.os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cpu);
          this->__isset.cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memory);
          this->__isset.memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->IO);
          this->__isset.IO = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app);
          this->__isset.app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskInfo");

  xfer += oprot->writeFieldBegin("vc_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->vc_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->os);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpu", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->cpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IO", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->IO);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->app);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskInfo &a, TaskInfo &b) {
  using ::std::swap;
  swap(a.vc_name, b.vc_name);
  swap(a.id, b.id);
  swap(a.os, b.os);
  swap(a.type, b.type);
  swap(a.cpu, b.cpu);
  swap(a.memory, b.memory);
  swap(a.IO, b.IO);
  swap(a.ip, b.ip);
  swap(a.app, b.app);
  swap(a.__isset, b.__isset);
}


