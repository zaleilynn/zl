/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef master_TYPES_H
#define master_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _ExecutorStat__isset {
  _ExecutorStat__isset() : vc_name(false), task_id(false), cpu_usage(false), memory_usage(false) {}
  bool vc_name;
  bool task_id;
  bool cpu_usage;
  bool memory_usage;
} _ExecutorStat__isset;

class ExecutorStat {
 public:

  static const char* ascii_fingerprint; // = "FB11FF08354CE6EBB7BFE0173A4D13DC";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x11,0xFF,0x08,0x35,0x4C,0xE6,0xEB,0xB7,0xBF,0xE0,0x17,0x3A,0x4D,0x13,0xDC};

  ExecutorStat() : vc_name(), task_id(0), cpu_usage(0), memory_usage(0) {
  }

  virtual ~ExecutorStat() throw() {}

  std::string vc_name;
  int64_t task_id;
  double cpu_usage;
  double memory_usage;

  _ExecutorStat__isset __isset;

  void __set_vc_name(const std::string& val) {
    vc_name = val;
  }

  void __set_task_id(const int64_t val) {
    task_id = val;
  }

  void __set_cpu_usage(const double val) {
    cpu_usage = val;
  }

  void __set_memory_usage(const double val) {
    memory_usage = val;
  }

  bool operator == (const ExecutorStat & rhs) const
  {
    if (!(vc_name == rhs.vc_name))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    if (!(cpu_usage == rhs.cpu_usage))
      return false;
    if (!(memory_usage == rhs.memory_usage))
      return false;
    return true;
  }
  bool operator != (const ExecutorStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecutorStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExecutorStat &a, ExecutorStat &b);

typedef struct _MachineInfo__isset {
  _MachineInfo__isset() : endpoint(false), cpu_usage(false), all_vcpu(false), all_memory(false), avail_vcpu(false), avail_memory(false), vm_list(false) {}
  bool endpoint;
  bool cpu_usage;
  bool all_vcpu;
  bool all_memory;
  bool avail_vcpu;
  bool avail_memory;
  bool vm_list;
} _MachineInfo__isset;

class MachineInfo {
 public:

  static const char* ascii_fingerprint; // = "EE689CEA7F4C7CF9B6BEF45B296FAA8C";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x68,0x9C,0xEA,0x7F,0x4C,0x7C,0xF9,0xB6,0xBE,0xF4,0x5B,0x29,0x6F,0xAA,0x8C};

  MachineInfo() : endpoint(), cpu_usage(0), all_vcpu(0), all_memory(0), avail_vcpu(0), avail_memory(0) {
  }

  virtual ~MachineInfo() throw() {}

  std::string endpoint;
  double cpu_usage;
  int32_t all_vcpu;
  int32_t all_memory;
  int32_t avail_vcpu;
  int32_t avail_memory;
  std::vector<ExecutorStat>  vm_list;

  _MachineInfo__isset __isset;

  void __set_endpoint(const std::string& val) {
    endpoint = val;
  }

  void __set_cpu_usage(const double val) {
    cpu_usage = val;
  }

  void __set_all_vcpu(const int32_t val) {
    all_vcpu = val;
  }

  void __set_all_memory(const int32_t val) {
    all_memory = val;
  }

  void __set_avail_vcpu(const int32_t val) {
    avail_vcpu = val;
  }

  void __set_avail_memory(const int32_t val) {
    avail_memory = val;
  }

  void __set_vm_list(const std::vector<ExecutorStat> & val) {
    vm_list = val;
  }

  bool operator == (const MachineInfo & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(cpu_usage == rhs.cpu_usage))
      return false;
    if (!(all_vcpu == rhs.all_vcpu))
      return false;
    if (!(all_memory == rhs.all_memory))
      return false;
    if (!(avail_vcpu == rhs.avail_vcpu))
      return false;
    if (!(avail_memory == rhs.avail_memory))
      return false;
    if (!(vm_list == rhs.vm_list))
      return false;
    return true;
  }
  bool operator != (const MachineInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MachineInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MachineInfo &a, MachineInfo &b);

typedef struct _VCInfo__isset {
  _VCInfo__isset() : name(false), quota(false), os(false), vcpu(false), memory(false) {}
  bool name;
  bool quota;
  bool os;
  bool vcpu;
  bool memory;
} _VCInfo__isset;

class VCInfo {
 public:

  static const char* ascii_fingerprint; // = "F30B43547AD0CF89944AC297D104BC06";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x0B,0x43,0x54,0x7A,0xD0,0xCF,0x89,0x94,0x4A,0xC2,0x97,0xD1,0x04,0xBC,0x06};

  VCInfo() : name(), quota(0), os(), vcpu(0), memory(0) {
  }

  virtual ~VCInfo() throw() {}

  std::string name;
  int32_t quota;
  std::string os;
  int32_t vcpu;
  int32_t memory;

  _VCInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_quota(const int32_t val) {
    quota = val;
  }

  void __set_os(const std::string& val) {
    os = val;
  }

  void __set_vcpu(const int32_t val) {
    vcpu = val;
  }

  void __set_memory(const int32_t val) {
    memory = val;
  }

  bool operator == (const VCInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(quota == rhs.quota))
      return false;
    if (!(os == rhs.os))
      return false;
    if (!(vcpu == rhs.vcpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    return true;
  }
  bool operator != (const VCInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VCInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(VCInfo &a, VCInfo &b);

typedef struct _TaskInfo__isset {
  _TaskInfo__isset() : vc_name(false), id(false), os(false), vcpu(false), memory(false), ip(false) {}
  bool vc_name;
  bool id;
  bool os;
  bool vcpu;
  bool memory;
  bool ip;
} _TaskInfo__isset;

class TaskInfo {
 public:

  static const char* ascii_fingerprint; // = "F55E6FC6EF25297F4EEFFCA87E2BA82A";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x5E,0x6F,0xC6,0xEF,0x25,0x29,0x7F,0x4E,0xEF,0xFC,0xA8,0x7E,0x2B,0xA8,0x2A};

  TaskInfo() : vc_name(), id(0), os(), vcpu(0), memory(0), ip() {
  }

  virtual ~TaskInfo() throw() {}

  std::string vc_name;
  int64_t id;
  std::string os;
  int32_t vcpu;
  int32_t memory;
  std::string ip;

  _TaskInfo__isset __isset;

  void __set_vc_name(const std::string& val) {
    vc_name = val;
  }

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_os(const std::string& val) {
    os = val;
  }

  void __set_vcpu(const int32_t val) {
    vcpu = val;
  }

  void __set_memory(const int32_t val) {
    memory = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const TaskInfo & rhs) const
  {
    if (!(vc_name == rhs.vc_name))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(os == rhs.os))
      return false;
    if (!(vcpu == rhs.vcpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const TaskInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TaskInfo &a, TaskInfo &b);



#endif
